#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Analyze JSON backtest results.

This utility reads one or more JSON files generated by the backtest scripts
and outputs summary statistics. It can also display the trade list for
inspection.
"""

from __future__ import annotations

import argparse
from pathlib import Path
from typing import List

import pandas as pd


PROFIT_COLUMNS = ["profit_jpy", "pnl_yen"]
RET_COLUMNS = ["ret_pct", "pnl_pct"]


def load_trades(paths: List[str]) -> pd.DataFrame:
    """Load trade records from JSON files and concatenate them."""
    frames = []
    for p in paths:
        df = pd.read_json(Path(p))
        frames.append(df)
    if not frames:
        return pd.DataFrame()
    return pd.concat(frames, ignore_index=True)


def _find_col(df: pd.DataFrame, candidates: List[str]) -> str:
    for c in candidates:
        if c in df.columns:
            return c
    raise ValueError("Required column not found")


def summarize(trades: pd.DataFrame) -> pd.DataFrame:
    """Calculate summary statistics from trade DataFrame."""
    if trades.empty:
        return pd.DataFrame()

    profit_col = _find_col(trades, PROFIT_COLUMNS)
    ret_col = _find_col(trades, RET_COLUMNS)

    total_profit = trades[profit_col].sum()
    win_rate = (trades[profit_col] > 0).mean()
    mean_ret_pct = trades[ret_col].mean()
    sharpe = trades[ret_col].mean() / trades[ret_col].std(ddof=0)

    return pd.DataFrame(
        {
            "metric": [
                "trades",
                "total_profit",
                "win_rate",
                "avg_ret_pct",
                "sharpe",
            ],
            "value": [len(trades), total_profit, win_rate, mean_ret_pct, sharpe],
        }
    )


def _ascii_bar_chart(values: List[float], width: int = 40) -> str:
    if not values:
        return ""
    max_v = max(abs(v) for v in values) or 1
    lines = []
    for i, v in enumerate(values, 1):
        bar = "#" * int(abs(v) / max_v * width)
        sign = "" if v >= 0 else "-"
        lines.append(f"{i:>3} {sign}{bar} ({v:.0f})")
    return "\n".join(lines)


def main(argv: List[str] | None = None) -> None:
    ap = argparse.ArgumentParser(description="Backtest JSON analyzer")
    ap.add_argument("files", nargs="+", help="JSON files to analyze")
    ap.add_argument(
        "--show-trades",
        action="store_true",
        help="print trade table as well",
    )
    args = ap.parse_args(argv)

    trades = load_trades(args.files)
    if trades.empty:
        print("No trades loaded.")
        return

    summary = summarize(trades)
    print("=== Summary ===")
    print(summary.to_string(index=False))

    if args.show_trades:
        print("\n=== Trades ===")
        print(trades.to_string(index=False))
        profit_col = _find_col(trades, PROFIT_COLUMNS)
        print("\n=== Profit per Trade ===")
        chart = _ascii_bar_chart(trades[profit_col].tolist())
        print(chart)


if __name__ == "__main__":
    main()
